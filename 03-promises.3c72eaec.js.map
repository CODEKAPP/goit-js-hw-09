{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAeG,SAAMC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAAW,GAIpCH,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,IAMvB,SAAOM,EAAqBP,EAAUC,GACtCO,EAAAX,GAASY,OAAOC,QAAQ,qBAAoCC,OAAfX,EAAS,QAAYW,OAANV,EAAM,M,CAIlE,SAAOW,EAAoBZ,EAAUC,GACrCO,EAAAX,GAASY,OAAOI,QAAQ,oBAAmCF,OAAfX,EAAS,QAAYW,OAANV,EAAM,M,CAhCtDa,SAASC,cAAc,SAkE/BC,iBAAiB,UA9BpB,SAAoBC,GACpBA,EAAMC,iBAeL,IAZD,IAAMC,EAAaL,SAASC,cAAc,uBACpCK,EAAYN,SAASC,cAAc,sBACnCM,EAAcP,SAASC,cAAc,wBAGrCO,EAAQC,OAAOJ,EAAWK,OAC1BC,EAAOF,OAAOH,EAAUI,OACxBE,EAASH,OAAOF,EAAYG,OAE9BG,EAAeL,EAGVM,EAAI,EAAGA,GAAKF,EAAQE,IAC3B7B,EAAc6B,EAAGD,GACdE,MAAK,SAAAC,GACJvB,EADeuB,EAAR9B,SAAe8B,EAAL7B,M,IAGlB8B,OAAM,SAAAD,GACLlB,EADgBkB,EAAR9B,SAAe8B,EAAL7B,M,IAItB0B,GAAgBF,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix'; // Importar la biblioteca Notiflix\n\n// Referencia al formulario HTML\nconst form = document.querySelector('.form');\n// Referencias a los elementos del formulario\n// const delayInput = document.querySelector('input[name=\"delay\"]');\n// const stepInput = document.querySelector('input[name=\"step\"]');\n// const amountInput = document.querySelector('input[name=\"amount\"]');\n\n// // Establecer los valores predeterminados\n// delayInput.value = '1000'; // Valor predeterminado de delay: 1000\n// stepInput.value = '500'; // Valor predeterminado de step: 500\n// amountInput.value = '5'; // Valor predeterminado de amount: 5\n\n// Función para crear una promesa con el número de posición y retraso especificados\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    // Comprobar si la promesa debe cumplirse o rechazarse\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n\n// Función para mostrar una notificación de promesa cumplida\nfunction showFulfilledPromise(position, delay) {\n  Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n}\n\n// Función para mostrar una notificación de promesa rechazada\nfunction showRejectedPromise(position, delay) {\n  Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n}\n\n// Función para procesar el envío del formulario\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  // Obtener los valores de los campos del formulario\n  const delayInput = document.querySelector('input[name=\"delay\"]');\n  const stepInput = document.querySelector('input[name=\"step\"]');\n  const amountInput = document.querySelector('input[name=\"amount\"]');\n\n  // Convertir los valores a números\n  const delay = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n\n  let currentDelay = delay;\n\n  // Crear las promesas según la cantidad y los retrasos especificados\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, currentDelay)\n      .then(({ position, delay }) => {\n        showFulfilledPromise(position, delay);\n      })\n      .catch(({ position, delay }) => {\n        showRejectedPromise(position, delay);\n      });\n\n    currentDelay += step;\n  }\n}\n\n// Agregar un evento de envío al formulario\nform.addEventListener('submit', handleSubmit);\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","Math","random","$ce04d3a99e08e73b$var$showFulfilledPromise","$parcel$interopDefault","Notify","success","concat","$ce04d3a99e08e73b$var$showRejectedPromise","failure","document","querySelector","addEventListener","event","preventDefault","delayInput","stepInput","amountInput","delay1","Number","value","step","amount","currentDelay","i","then","param","catch"],"version":3,"file":"03-promises.3c72eaec.js.map"}